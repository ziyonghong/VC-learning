// 4.5.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "4.5.h"

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY _tWinMain(HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPTSTR    lpCmdLine,
	int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	// TODO: 在此放置代码。
	MSG msg;
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_MY45, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY45));

	// 主消息循环:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY45));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_MY45);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	HWND hWnd;

	hInst = hInstance; // 将实例句柄存储在全局变量中

	hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

	if (!hWnd)
	{
		return FALSE;
	}

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	HDC hDC;	// 定义设备环境句柄
	HBRUSH hBrush;	// 定义画刷句柄
	HPEN hPen;	// 定义画笔句柄
	PAINTSTRUCT PtStr;	// 定义包含绘图信息的结构体变量
	double dfRadious0 = 100.0,dfRadious1;	// 外部/ 内部正五边形外接圆半径
	POINT lpOuterPoints[5],lpInnerPoints[5];	// 定义外,内正五边形点结构数组
	POINT lpTriangle[3];	// 定义三角形点结构数组
	dfRadious1 = dfRadious0 * sin(0.1 * Pi)/ sin(126.0/ 180 * Pi); // 根据外圆半径计算内圆半径
	// 计算内外正五边形的点坐标
	for(int i = 0;i < 5;i++)
	{
		lpOuterPoints[i] .x = (long)(dfRadious0 * cos(i * 72.0/ 180 * Pi));
		lpOuterPoints[i] .y = (long)(dfRadious0 * sin(i * 72.0/ 180 * Pi));
		lpInnerPoints[i] .x = (long)(dfRadious1 * cos(i * 72.0/ 180 * Pi + 36.0/ 180 * Pi));
		lpInnerPoints[i] .y = (long)(dfRadious1 * sin(i * 72.0/ 180 * Pi + 36.0/ 180 * Pi));
	}

	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// 分析菜单选择:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hDC = BeginPaint(hWnd,&PtStr);	// 得到设备环境句柄
		SetMapMode(hDC,MM_ANISOTROPIC);	// 设置映像模式
		SetWindowOrgEx(hDC, - 100, - 100,NULL);      // 设置坐标原点
		hPen = CreatePen(PS_SOLID,1,RGB(255,0,0)); // 创建红色画笔
		SelectObject(hDC,hPen);	// 将画笔选入
		Polygon(hDC,lpOuterPoints,5);	// 画正五边形
		int i;
		for( i= 0;i < 5;i++ )	// 填充正五边形的不同区域
		{
			lpTriangle[0] = lpOuterPoints[i % 5];	// 生成图形中的三角形区域的坐标
			lpTriangle[1] = lpInnerPoints[i % 5]; lpTriangle[2] = lpOuterPoints[(i + 1) % 5];
			hBrush = CreateSolidBrush(RGB(i * 10,i * 20,i * 9));// 创建新画刷
			SelectObject(hDC,hBrush);	// 选入新画刷
			Polygon(hDC,lpTriangle,3);	// 画三角形区域
			lpTriangle[2] = lpInnerPoints[(i + 4) % 5];	// 生成图形中的三角形区域的坐标
			hBrush = CreateSolidBrush(RGB(i * 1,i * 30,i * 20));// 创建画刷
			SelectObject(hDC,hBrush);	// 选入画刷
			Polygon(hDC,lpTriangle,3);	// 画三角形区域
		}
		hBrush = CreateSolidBrush(RGB(255,255,255));	// 创建白画刷
		SelectObject(hDC,hBrush);
		Polygon(hDC,lpInnerPoints,5);	// 画中心的五边形
		// 用不同种颜色的画笔来绘制五角星
		MoveToEx(hDC,lpOuterPoints[0] .x,lpOuterPoints[0] .y,NULL); 
		for(i = 1;i <= 5;i++)
		{
			hPen = CreatePen(PS_SOLID,1,RGB(0,i * 51,0));
			SelectObject(hDC,hPen);
			LineTo(hDC,lpOuterPoints[(i + 2) % 5].x,lpOuterPoints[(i + 2) % 5].y);
		}
		hPen = (HPEN)(GetStockObject(PS_NULL));
		DeleteObject(hPen);	//删除画笔
		DeleteObject(hBrush);	// 删除画刷
		EndPaint(hWnd,&PtStr);	// 结束绘图

		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
