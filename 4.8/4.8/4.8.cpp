// 4.8.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "4.8.h"

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

int nNum=0,nMaxNum=20;// nMaxNum 为叶片循环一周中绘图的次数
// nNum 记录了当前的序数

// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: 在此放置代码。
	MSG msg;
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_MY48, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY48));

	// 主消息循环:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY48));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_MY48);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT PtStr;
	HDC hDC;
	HBRUSH hBrush;	// 定义画刷句柄
HPEN hPen;	// 定义画笔句柄
int nCentreX,nCentreY;	// 定义 3 个叶片的圆心的坐标
double fAngle; 
	
	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// 分析菜单选择:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		
		  hDC = BeginPaint(hWnd,&PtStr);	// 获得设备环境指针
    SetMapMode(hDC,MM_ANISOTROPIC);	// 设置映像模式
    SetWindowExtEx(hDC,400,300,NULL);	// 设置窗口区域 .逻辑单位
    SetViewportExtEx(hDC,600,450,NULL);	// 设置视口区域 .物理单位
    SetViewportOrgEx(hDC,300,200,NULL);	// 设置视口原点坐标为(300,200)
   // 绘制外圆
    hPen = (HPEN)GetStockObject(BLACK_PEN);
    SelectObject(hDC,hPen);
    Ellipse(hDC, - 100, - 100,100,100);
   // 绘制风车的叶片。
    hBrush = CreateSolidBrush(RGB(255,0,0));	// 画红色的叶片
    SelectObject(hDC,hBrush);
    fAngle = 2 * Pi/ nMaxNum * nNum;
    nCentreX = (int)(50 * cos(fAngle));
    nCentreY = (int)(50 * sin(fAngle));
    Pie( hDC,nCentreX - 50,nCentreY - 50, nCentreX + 50,nCentreY + 50,
(int)(nCentreX + 50 * cos(fAngle)),(int)(nCentreY + 50 * sin(fAngle)),
(int)(nCentreX + 50 * cos(fAngle + Pi)),(int)(nCentreY + 50 * sin(fAngle + Pi)));
    hBrush = CreateSolidBrush(RGB(255,255,0));	// 画天蓝色的叶片
    SelectObject(hDC,hBrush);
    nCentreX = (int)(50 * cos(fAngle + 2 * Pi/ 3));
    nCentreY = (int)(50 * sin(fAngle + 2 * Pi/ 3));
    Pie( hDC,nCentreX - 50,nCentreY - 50, nCentreX + 50,nCentreY + 50,
(int)(nCentreX + 50 * cos(fAngle + 2 * Pi/ 3)),(int)(nCentreY + 50 * sin(fAngle + 2 *
Pi/ 3)),
(int)(nCentreX + 50 * cos(fAngle + Pi + 2 * Pi/ 3)),(int)(nCentreY + 50 * sin(fAngle + Pi + 2 * Pi/ 3)));
    hBrush = CreateSolidBrush(RGB(0,255,255));	// 画黄色的叶片
    SelectObject(hDC,hBrush);
    nCentreX = (int)(50 * cos(fAngle + 4 * Pi/ 3));
    nCentreY = (int)(50 * sin(fAngle + 4 * Pi/ 3));
    Pie( hDC,nCentreX - 50,nCentreY - 50, nCentreX + 50,nCentreY + 50,
(int)(nCentreX + 50 * cos(fAngle + 4 * Pi/ 3)),(int)(nCentreY + 50 * sin(fAngle + 4 *
Pi/ 3)),
(int)(nCentreX + 50 * cos(fAngle + Pi + 4 * Pi/ 3)),(int)(nCentreY + 50 * sin(fAngle + Pi + 4 * Pi/ 3)));
	  nNum++;	// 当前序数加 1
    Sleep(100);	// 等待 0 .1 秒
    InvalidateRect(hWnd,NULL,1);	// 重绘窗口区域
		EndPaint(hWnd, &PtStr);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
